# frozen_string_literal: true

class IBANRegistryParser
  def self.run
    new.run
  end

  def run
    data = extract
    create_specification(data)
  end

  private

  def create_specification(data)
    File.open('./script/iban_spec.js', 'w') do |file|
      file.write "/*!\n"
      file.write " * @license\n"
      file.write " * This Source Code Form is subject to the terms of the Mozilla Public\n"
      file.write " * License, v. 2.0. If a copy of the MPL was not distributed with this\n"
      file.write " * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n"

      file.write "export const autogeneratedCountrySpecs = {\n"
      data.each do |spec|
        file.write "  #{spec[:code]}: {\n"
        file.write "    chars: #{spec[:length]},\n"
        file.write "    bban_regexp: '#{spec[:bban_regexp]}',\n"
        file.write "    IBANRegistry: true,\n"
        file.write "    SEPA: #{spec[:sepa]},\n"
        file.write "    branch_indentifier: '#{spec[:branch_indentifier]}',\n" if spec[:branch_indentifier]
        file.write "    bank_identifier: '#{spec[:bank_identifier]}',\n" if spec[:bank_identifier]
        file.write "    account_indentifier: '#{spec[:account_indentifier]}',\n" if spec[:account_indentifier]
        file.write "  },\n"
      end
      file.write "};\n"
    end
  end

  def extract
    data = File.readlines('./script/registry.txt').each_with_object([]) do |line, result|
      data = line.force_encoding("iso-8859-1").split("\t").map { |e| e.strip }
      data[1..].each_with_index { |element, index| result[index] = { country_name: element } } if data.first == 'Name of country'
      data[1..].each_with_index { |element, index| result[index][:code] = element } if data.first == 'IBAN prefix country code (ISO 3166)'
      data[1..].each_with_index { |element, index| result[index][:sepa] = element == 'Yes' } if data.first == 'SEPA country'
      data[1..].each_with_index { |element, index| result[index][:length] = element.to_i } if data.first == 'IBAN length'
      data[1..].each_with_index { |element, index| result[index][:bban_regexp] = build_reqexp(element) } if data.first == 'BBAN structure'
      data[1..].each_with_index { |element, index| result[index][:bank_identifier] = fix_ranges(element) } if data.first == 'Bank identifier position within the BBAN'
      data[1..].each_with_index { |element, index| result[index][:branch_indentifier] = fix_ranges(element) } if data.first == 'Branch identifier position within the BBAN'
      data[1..].each_with_index { |element, index| result[index][:iban_example] = element } if data.first == 'IBAN electronic format example'
      data[1..].each_with_index { |element, index| result[index][:account_example] = element.gsub(' ', '') } if data.first == 'Domestic account number example'
    end
    data = find_account_position(data)
    data.map(&:compact)
  end

  def find_account_position(data)
    data.each do |spec|
      pos = spec[:iban_example].index(spec[:account_example])
      spec[:account_indentifier] = [pos, pos + spec[:account_example].length].join('-') if pos
    end
    data
  end

  def fix_ranges(ranges)
    return nil if ranges == 'N/A'
    return nil if ranges == ''

    # ranges == '' ? nil : ranges
    ranges.split('-').map(&:to_i).map(&:pred).join('-')
  end

  def type_to_range(type)
    return '[A-Z0-9]' if type == 'c'
    return '[0-9]' if type == 'n'
  
    '[A-Z]'
  end
  
  def build_reqexp(format)
    data = format.scan(/([0-9]+)!(.)/)
    '^' + data.map { |(amount, type)| "#{type_to_range(type)}{#{amount}}" }.join + '$'
  end
end

IBANRegistryParser.run
